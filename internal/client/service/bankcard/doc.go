// Package bankcard предоставляет функционал для управления данными банковских карт
// в клиентском приложении GophKeeper.
//
// BankCardManager реализует CRUD операции с банковскими картами,
// взаимодействует с сервером по gRPC, добавляя в контекст токен авторизации,
// а также логирует все операции с чувствительными данными.
//
// Основные возможности:
//   - Создание, получение, обновление и удаление записей банковских карт
//   - Безопасная передача зашифрованных данных (номера карт, CVV, срок действия)
//   - Автоматическое добавление токена доступа в метаданные контекста запросов
//   - Поддержка внедрения моков для тестирования
//   - Валидация основных полей карт перед отправкой на сервер
//
// Типы:
//   - BankCardManagerIface — интерфейс для управления банковскими картами,
//     обеспечивающий легкое мокирование и расширяемость
//   - BankCardManager — основная реализация интерфейса с бизнес-логикой,
//     включая обработку ошибок и логирование
//
// Особенности безопасности:
//   - Все чувствительные данные (номера карт, CVV) передаются в зашифрованном виде
//   - Логирование исключает запись полных номеров карт и CVV
//
// Пример использования:
//
//	// Инициализация
//	logger := zap.NewExample()
//	manager := bankcard.NewBankCardManager(logger)
//	conn := grpc.NewClient(...)
//	manager.SetClient(pb.NewBankCardServiceClient(conn))
//
//	// Создание карты
//	card := &model.BankCard{
//	    Title:          "Основная карта",
//	    CardholderName: "IVAN IVANOV",
//	    CardNumber:     "4111111111111111",
//	    ExpiryDate:     "12/25",
//	    CVV:            "123",
//	    Metadata:       "Основной счет Сбербанк",
//	}
//	if err := manager.CreateBankCard(ctx, card); err != nil {
//	    logger.Error("Ошибка создания карты", zap.Error(err))
//	}
//
//	// Получение всех карт
//	cards, err := manager.GetBankCards(ctx)
//	if err != nil {
//	    logger.Error("Ошибка получения карт", zap.Error(err))
//	}
package bankcard
