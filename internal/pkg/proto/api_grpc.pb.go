// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Register_FullMethodName = "/gophkeeper.proto.AuthService/Register"
	AuthService_Login_FullMethodName    = "/gophkeeper.proto.AuthService/Login"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC-сервис аутентификации
type AuthServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// gRPC-сервис аутентификации
type AuthServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	CredentialService_CreateCredential_FullMethodName  = "/gophkeeper.proto.CredentialService/CreateCredential"
	CredentialService_GetCredentialByID_FullMethodName = "/gophkeeper.proto.CredentialService/GetCredentialByID"
	CredentialService_GetCredentials_FullMethodName    = "/gophkeeper.proto.CredentialService/GetCredentials"
	CredentialService_UpdateCredential_FullMethodName  = "/gophkeeper.proto.CredentialService/UpdateCredential"
	CredentialService_DeleteCredential_FullMethodName  = "/gophkeeper.proto.CredentialService/DeleteCredential"
)

// CredentialServiceClient is the client API for CredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с Credential
type CredentialServiceClient interface {
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error)
	GetCredentialByID(ctx context.Context, in *GetCredentialByIDRequest, opts ...grpc.CallOption) (*GetCredentialByIDResponse, error)
	GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*UpdateCredentialResponse, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error)
}

type credentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialServiceClient(cc grpc.ClientConnInterface) CredentialServiceClient {
	return &credentialServiceClient{cc}
}

func (c *credentialServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialService_CreateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) GetCredentialByID(ctx context.Context, in *GetCredentialByIDRequest, opts ...grpc.CallOption) (*GetCredentialByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialByIDResponse)
	err := c.cc.Invoke(ctx, CredentialService_GetCredentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, CredentialService_GetCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*UpdateCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialService_UpdateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialService_DeleteCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialServiceServer is the server API for CredentialService service.
// All implementations must embed UnimplementedCredentialServiceServer
// for forward compatibility.
//
// Сервис для работы с Credential
type CredentialServiceServer interface {
	CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error)
	GetCredentialByID(context.Context, *GetCredentialByIDRequest) (*GetCredentialByIDResponse, error)
	GetCredentials(context.Context, *emptypb.Empty) (*GetCredentialsResponse, error)
	UpdateCredential(context.Context, *UpdateCredentialRequest) (*UpdateCredentialResponse, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error)
	mustEmbedUnimplementedCredentialServiceServer()
}

// UnimplementedCredentialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCredentialServiceServer struct{}

func (UnimplementedCredentialServiceServer) CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedCredentialServiceServer) GetCredentialByID(context.Context, *GetCredentialByIDRequest) (*GetCredentialByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByID not implemented")
}
func (UnimplementedCredentialServiceServer) GetCredentials(context.Context, *emptypb.Empty) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedCredentialServiceServer) UpdateCredential(context.Context, *UpdateCredentialRequest) (*UpdateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedCredentialServiceServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedCredentialServiceServer) mustEmbedUnimplementedCredentialServiceServer() {}
func (UnimplementedCredentialServiceServer) testEmbeddedByValue()                           {}

// UnsafeCredentialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialServiceServer will
// result in compilation errors.
type UnsafeCredentialServiceServer interface {
	mustEmbedUnimplementedCredentialServiceServer()
}

func RegisterCredentialServiceServer(s grpc.ServiceRegistrar, srv CredentialServiceServer) {
	// If the following call pancis, it indicates UnimplementedCredentialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CredentialService_ServiceDesc, srv)
}

func _CredentialService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_GetCredentialByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).GetCredentialByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_GetCredentialByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).GetCredentialByID(ctx, req.(*GetCredentialByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).GetCredentials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).UpdateCredential(ctx, req.(*UpdateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialService_ServiceDesc is the grpc.ServiceDesc for CredentialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.proto.CredentialService",
	HandlerType: (*CredentialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCredential",
			Handler:    _CredentialService_CreateCredential_Handler,
		},
		{
			MethodName: "GetCredentialByID",
			Handler:    _CredentialService_GetCredentialByID_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _CredentialService_GetCredentials_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _CredentialService_UpdateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _CredentialService_DeleteCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	BankCardService_CreateBankCard_FullMethodName  = "/gophkeeper.proto.BankCardService/CreateBankCard"
	BankCardService_GetBankCardByID_FullMethodName = "/gophkeeper.proto.BankCardService/GetBankCardByID"
	BankCardService_GetBankCards_FullMethodName    = "/gophkeeper.proto.BankCardService/GetBankCards"
	BankCardService_UpdateBankCard_FullMethodName  = "/gophkeeper.proto.BankCardService/UpdateBankCard"
	BankCardService_DeleteBankCard_FullMethodName  = "/gophkeeper.proto.BankCardService/DeleteBankCard"
)

// BankCardServiceClient is the client API for BankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с BankCard
type BankCardServiceClient interface {
	CreateBankCard(ctx context.Context, in *CreateBankCardRequest, opts ...grpc.CallOption) (*CreateBankCardResponse, error)
	GetBankCardByID(ctx context.Context, in *GetBankCardByIDRequest, opts ...grpc.CallOption) (*GetBankCardByIDResponse, error)
	GetBankCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBankCardsResponse, error)
	UpdateBankCard(ctx context.Context, in *UpdateBankCardRequest, opts ...grpc.CallOption) (*UpdateBankCardResponse, error)
	DeleteBankCard(ctx context.Context, in *DeleteBankCardRequest, opts ...grpc.CallOption) (*DeleteBankCardResponse, error)
}

type bankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardServiceClient(cc grpc.ClientConnInterface) BankCardServiceClient {
	return &bankCardServiceClient{cc}
}

func (c *bankCardServiceClient) CreateBankCard(ctx context.Context, in *CreateBankCardRequest, opts ...grpc.CallOption) (*CreateBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankCardResponse)
	err := c.cc.Invoke(ctx, BankCardService_CreateBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) GetBankCardByID(ctx context.Context, in *GetBankCardByIDRequest, opts ...grpc.CallOption) (*GetBankCardByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankCardByIDResponse)
	err := c.cc.Invoke(ctx, BankCardService_GetBankCardByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) GetBankCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBankCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankCardsResponse)
	err := c.cc.Invoke(ctx, BankCardService_GetBankCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) UpdateBankCard(ctx context.Context, in *UpdateBankCardRequest, opts ...grpc.CallOption) (*UpdateBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBankCardResponse)
	err := c.cc.Invoke(ctx, BankCardService_UpdateBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) DeleteBankCard(ctx context.Context, in *DeleteBankCardRequest, opts ...grpc.CallOption) (*DeleteBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBankCardResponse)
	err := c.cc.Invoke(ctx, BankCardService_DeleteBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardServiceServer is the server API for BankCardService service.
// All implementations must embed UnimplementedBankCardServiceServer
// for forward compatibility.
//
// Сервис для работы с BankCard
type BankCardServiceServer interface {
	CreateBankCard(context.Context, *CreateBankCardRequest) (*CreateBankCardResponse, error)
	GetBankCardByID(context.Context, *GetBankCardByIDRequest) (*GetBankCardByIDResponse, error)
	GetBankCards(context.Context, *emptypb.Empty) (*GetBankCardsResponse, error)
	UpdateBankCard(context.Context, *UpdateBankCardRequest) (*UpdateBankCardResponse, error)
	DeleteBankCard(context.Context, *DeleteBankCardRequest) (*DeleteBankCardResponse, error)
	mustEmbedUnimplementedBankCardServiceServer()
}

// UnimplementedBankCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardServiceServer struct{}

func (UnimplementedBankCardServiceServer) CreateBankCard(context.Context, *CreateBankCardRequest) (*CreateBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) GetBankCardByID(context.Context, *GetBankCardByIDRequest) (*GetBankCardByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCardByID not implemented")
}
func (UnimplementedBankCardServiceServer) GetBankCards(context.Context, *emptypb.Empty) (*GetBankCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCards not implemented")
}
func (UnimplementedBankCardServiceServer) UpdateBankCard(context.Context, *UpdateBankCardRequest) (*UpdateBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) DeleteBankCard(context.Context, *DeleteBankCardRequest) (*DeleteBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) mustEmbedUnimplementedBankCardServiceServer() {}
func (UnimplementedBankCardServiceServer) testEmbeddedByValue()                         {}

// UnsafeBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardServiceServer will
// result in compilation errors.
type UnsafeBankCardServiceServer interface {
	mustEmbedUnimplementedBankCardServiceServer()
}

func RegisterBankCardServiceServer(s grpc.ServiceRegistrar, srv BankCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardService_ServiceDesc, srv)
}

func _BankCardService_CreateBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).CreateBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_CreateBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).CreateBankCard(ctx, req.(*CreateBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_GetBankCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankCardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).GetBankCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_GetBankCardByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).GetBankCardByID(ctx, req.(*GetBankCardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_GetBankCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).GetBankCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_GetBankCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).GetBankCards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_UpdateBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).UpdateBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_UpdateBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).UpdateBankCard(ctx, req.(*UpdateBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_DeleteBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).DeleteBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_DeleteBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).DeleteBankCard(ctx, req.(*DeleteBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardService_ServiceDesc is the grpc.ServiceDesc for BankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.proto.BankCardService",
	HandlerType: (*BankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankCard",
			Handler:    _BankCardService_CreateBankCard_Handler,
		},
		{
			MethodName: "GetBankCardByID",
			Handler:    _BankCardService_GetBankCardByID_Handler,
		},
		{
			MethodName: "GetBankCards",
			Handler:    _BankCardService_GetBankCards_Handler,
		},
		{
			MethodName: "UpdateBankCard",
			Handler:    _BankCardService_UpdateBankCard_Handler,
		},
		{
			MethodName: "DeleteBankCard",
			Handler:    _BankCardService_DeleteBankCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	TextDataService_CreateTextData_FullMethodName    = "/gophkeeper.proto.TextDataService/CreateTextData"
	TextDataService_GetTextDataByID_FullMethodName   = "/gophkeeper.proto.TextDataService/GetTextDataByID"
	TextDataService_GetTextDataTitles_FullMethodName = "/gophkeeper.proto.TextDataService/GetTextDataTitles"
	TextDataService_UpdateTextData_FullMethodName    = "/gophkeeper.proto.TextDataService/UpdateTextData"
	TextDataService_DeleteTextData_FullMethodName    = "/gophkeeper.proto.TextDataService/DeleteTextData"
)

// TextDataServiceClient is the client API for TextDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с TextData
type TextDataServiceClient interface {
	CreateTextData(ctx context.Context, in *CreateTextDataRequest, opts ...grpc.CallOption) (*CreateTextDataResponse, error)
	GetTextDataByID(ctx context.Context, in *GetTextDataByIDRequest, opts ...grpc.CallOption) (*GetTextDataByIDResponse, error)
	GetTextDataTitles(ctx context.Context, in *GetTextDataTitlesRequest, opts ...grpc.CallOption) (*GetTextDataTitlesResponse, error)
	UpdateTextData(ctx context.Context, in *UpdateTextDataRequest, opts ...grpc.CallOption) (*UpdateTextDataResponse, error)
	DeleteTextData(ctx context.Context, in *DeleteTextDataRequest, opts ...grpc.CallOption) (*DeleteTextDataResponse, error)
}

type textDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextDataServiceClient(cc grpc.ClientConnInterface) TextDataServiceClient {
	return &textDataServiceClient{cc}
}

func (c *textDataServiceClient) CreateTextData(ctx context.Context, in *CreateTextDataRequest, opts ...grpc.CallOption) (*CreateTextDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTextDataResponse)
	err := c.cc.Invoke(ctx, TextDataService_CreateTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textDataServiceClient) GetTextDataByID(ctx context.Context, in *GetTextDataByIDRequest, opts ...grpc.CallOption) (*GetTextDataByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTextDataByIDResponse)
	err := c.cc.Invoke(ctx, TextDataService_GetTextDataByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textDataServiceClient) GetTextDataTitles(ctx context.Context, in *GetTextDataTitlesRequest, opts ...grpc.CallOption) (*GetTextDataTitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTextDataTitlesResponse)
	err := c.cc.Invoke(ctx, TextDataService_GetTextDataTitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textDataServiceClient) UpdateTextData(ctx context.Context, in *UpdateTextDataRequest, opts ...grpc.CallOption) (*UpdateTextDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTextDataResponse)
	err := c.cc.Invoke(ctx, TextDataService_UpdateTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textDataServiceClient) DeleteTextData(ctx context.Context, in *DeleteTextDataRequest, opts ...grpc.CallOption) (*DeleteTextDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTextDataResponse)
	err := c.cc.Invoke(ctx, TextDataService_DeleteTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextDataServiceServer is the server API for TextDataService service.
// All implementations must embed UnimplementedTextDataServiceServer
// for forward compatibility.
//
// Сервис для работы с TextData
type TextDataServiceServer interface {
	CreateTextData(context.Context, *CreateTextDataRequest) (*CreateTextDataResponse, error)
	GetTextDataByID(context.Context, *GetTextDataByIDRequest) (*GetTextDataByIDResponse, error)
	GetTextDataTitles(context.Context, *GetTextDataTitlesRequest) (*GetTextDataTitlesResponse, error)
	UpdateTextData(context.Context, *UpdateTextDataRequest) (*UpdateTextDataResponse, error)
	DeleteTextData(context.Context, *DeleteTextDataRequest) (*DeleteTextDataResponse, error)
	mustEmbedUnimplementedTextDataServiceServer()
}

// UnimplementedTextDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextDataServiceServer struct{}

func (UnimplementedTextDataServiceServer) CreateTextData(context.Context, *CreateTextDataRequest) (*CreateTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTextData not implemented")
}
func (UnimplementedTextDataServiceServer) GetTextDataByID(context.Context, *GetTextDataByIDRequest) (*GetTextDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextDataByID not implemented")
}
func (UnimplementedTextDataServiceServer) GetTextDataTitles(context.Context, *GetTextDataTitlesRequest) (*GetTextDataTitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextDataTitles not implemented")
}
func (UnimplementedTextDataServiceServer) UpdateTextData(context.Context, *UpdateTextDataRequest) (*UpdateTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextData not implemented")
}
func (UnimplementedTextDataServiceServer) DeleteTextData(context.Context, *DeleteTextDataRequest) (*DeleteTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextData not implemented")
}
func (UnimplementedTextDataServiceServer) mustEmbedUnimplementedTextDataServiceServer() {}
func (UnimplementedTextDataServiceServer) testEmbeddedByValue()                         {}

// UnsafeTextDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextDataServiceServer will
// result in compilation errors.
type UnsafeTextDataServiceServer interface {
	mustEmbedUnimplementedTextDataServiceServer()
}

func RegisterTextDataServiceServer(s grpc.ServiceRegistrar, srv TextDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextDataService_ServiceDesc, srv)
}

func _TextDataService_CreateTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).CreateTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_CreateTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).CreateTextData(ctx, req.(*CreateTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextDataService_GetTextDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).GetTextDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_GetTextDataByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).GetTextDataByID(ctx, req.(*GetTextDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextDataService_GetTextDataTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextDataTitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).GetTextDataTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_GetTextDataTitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).GetTextDataTitles(ctx, req.(*GetTextDataTitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextDataService_UpdateTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).UpdateTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_UpdateTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).UpdateTextData(ctx, req.(*UpdateTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextDataService_DeleteTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).DeleteTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_DeleteTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).DeleteTextData(ctx, req.(*DeleteTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextDataService_ServiceDesc is the grpc.ServiceDesc for TextDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.proto.TextDataService",
	HandlerType: (*TextDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTextData",
			Handler:    _TextDataService_CreateTextData_Handler,
		},
		{
			MethodName: "GetTextDataByID",
			Handler:    _TextDataService_GetTextDataByID_Handler,
		},
		{
			MethodName: "GetTextDataTitles",
			Handler:    _TextDataService_GetTextDataTitles_Handler,
		},
		{
			MethodName: "UpdateTextData",
			Handler:    _TextDataService_UpdateTextData_Handler,
		},
		{
			MethodName: "DeleteTextData",
			Handler:    _TextDataService_DeleteTextData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	BinaryDataService_UploadBinaryData_FullMethodName   = "/gophkeeper.proto.BinaryDataService/UploadBinaryData"
	BinaryDataService_DownloadBinaryData_FullMethodName = "/gophkeeper.proto.BinaryDataService/DownloadBinaryData"
	BinaryDataService_ListBinaryData_FullMethodName     = "/gophkeeper.proto.BinaryDataService/ListBinaryData"
	BinaryDataService_DeleteBinaryData_FullMethodName   = "/gophkeeper.proto.BinaryDataService/DeleteBinaryData"
	BinaryDataService_UpdateBinaryData_FullMethodName   = "/gophkeeper.proto.BinaryDataService/UpdateBinaryData"
)

// BinaryDataServiceClient is the client API for BinaryDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с BinaryData
type BinaryDataServiceClient interface {
	UploadBinaryData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBinaryDataRequest, UploadBinaryDataResponse], error)
	DownloadBinaryData(ctx context.Context, in *DownloadBinaryDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadBinaryDataResponse], error)
	ListBinaryData(ctx context.Context, in *ListBinaryDataRequest, opts ...grpc.CallOption) (*ListBinaryDataResponse, error)
	DeleteBinaryData(ctx context.Context, in *DeleteBinaryDataRequest, opts ...grpc.CallOption) (*DeleteBinaryDataResponse, error)
	UpdateBinaryData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateBinaryDataRequest, UpdateBinaryDataResponse], error)
}

type binaryDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryDataServiceClient(cc grpc.ClientConnInterface) BinaryDataServiceClient {
	return &binaryDataServiceClient{cc}
}

func (c *binaryDataServiceClient) UploadBinaryData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBinaryDataRequest, UploadBinaryDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BinaryDataService_ServiceDesc.Streams[0], BinaryDataService_UploadBinaryData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadBinaryDataRequest, UploadBinaryDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryDataService_UploadBinaryDataClient = grpc.ClientStreamingClient[UploadBinaryDataRequest, UploadBinaryDataResponse]

func (c *binaryDataServiceClient) DownloadBinaryData(ctx context.Context, in *DownloadBinaryDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadBinaryDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BinaryDataService_ServiceDesc.Streams[1], BinaryDataService_DownloadBinaryData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadBinaryDataRequest, DownloadBinaryDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryDataService_DownloadBinaryDataClient = grpc.ServerStreamingClient[DownloadBinaryDataResponse]

func (c *binaryDataServiceClient) ListBinaryData(ctx context.Context, in *ListBinaryDataRequest, opts ...grpc.CallOption) (*ListBinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_ListBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryDataServiceClient) DeleteBinaryData(ctx context.Context, in *DeleteBinaryDataRequest, opts ...grpc.CallOption) (*DeleteBinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_DeleteBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryDataServiceClient) UpdateBinaryData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateBinaryDataRequest, UpdateBinaryDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BinaryDataService_ServiceDesc.Streams[2], BinaryDataService_UpdateBinaryData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateBinaryDataRequest, UpdateBinaryDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryDataService_UpdateBinaryDataClient = grpc.ClientStreamingClient[UpdateBinaryDataRequest, UpdateBinaryDataResponse]

// BinaryDataServiceServer is the server API for BinaryDataService service.
// All implementations must embed UnimplementedBinaryDataServiceServer
// for forward compatibility.
//
// Сервис для работы с BinaryData
type BinaryDataServiceServer interface {
	UploadBinaryData(grpc.ClientStreamingServer[UploadBinaryDataRequest, UploadBinaryDataResponse]) error
	DownloadBinaryData(*DownloadBinaryDataRequest, grpc.ServerStreamingServer[DownloadBinaryDataResponse]) error
	ListBinaryData(context.Context, *ListBinaryDataRequest) (*ListBinaryDataResponse, error)
	DeleteBinaryData(context.Context, *DeleteBinaryDataRequest) (*DeleteBinaryDataResponse, error)
	UpdateBinaryData(grpc.ClientStreamingServer[UpdateBinaryDataRequest, UpdateBinaryDataResponse]) error
	mustEmbedUnimplementedBinaryDataServiceServer()
}

// UnimplementedBinaryDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryDataServiceServer struct{}

func (UnimplementedBinaryDataServiceServer) UploadBinaryData(grpc.ClientStreamingServer[UploadBinaryDataRequest, UploadBinaryDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) DownloadBinaryData(*DownloadBinaryDataRequest, grpc.ServerStreamingServer[DownloadBinaryDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) ListBinaryData(context.Context, *ListBinaryDataRequest) (*ListBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) DeleteBinaryData(context.Context, *DeleteBinaryDataRequest) (*DeleteBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) UpdateBinaryData(grpc.ClientStreamingServer[UpdateBinaryDataRequest, UpdateBinaryDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) mustEmbedUnimplementedBinaryDataServiceServer() {}
func (UnimplementedBinaryDataServiceServer) testEmbeddedByValue()                           {}

// UnsafeBinaryDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryDataServiceServer will
// result in compilation errors.
type UnsafeBinaryDataServiceServer interface {
	mustEmbedUnimplementedBinaryDataServiceServer()
}

func RegisterBinaryDataServiceServer(s grpc.ServiceRegistrar, srv BinaryDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryDataService_ServiceDesc, srv)
}

func _BinaryDataService_UploadBinaryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinaryDataServiceServer).UploadBinaryData(&grpc.GenericServerStream[UploadBinaryDataRequest, UploadBinaryDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryDataService_UploadBinaryDataServer = grpc.ClientStreamingServer[UploadBinaryDataRequest, UploadBinaryDataResponse]

func _BinaryDataService_DownloadBinaryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBinaryDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinaryDataServiceServer).DownloadBinaryData(m, &grpc.GenericServerStream[DownloadBinaryDataRequest, DownloadBinaryDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryDataService_DownloadBinaryDataServer = grpc.ServerStreamingServer[DownloadBinaryDataResponse]

func _BinaryDataService_ListBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).ListBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_ListBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).ListBinaryData(ctx, req.(*ListBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryDataService_DeleteBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).DeleteBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_DeleteBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).DeleteBinaryData(ctx, req.(*DeleteBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryDataService_UpdateBinaryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinaryDataServiceServer).UpdateBinaryData(&grpc.GenericServerStream[UpdateBinaryDataRequest, UpdateBinaryDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryDataService_UpdateBinaryDataServer = grpc.ClientStreamingServer[UpdateBinaryDataRequest, UpdateBinaryDataResponse]

// BinaryDataService_ServiceDesc is the grpc.ServiceDesc for BinaryDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.proto.BinaryDataService",
	HandlerType: (*BinaryDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBinaryData",
			Handler:    _BinaryDataService_ListBinaryData_Handler,
		},
		{
			MethodName: "DeleteBinaryData",
			Handler:    _BinaryDataService_DeleteBinaryData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBinaryData",
			Handler:       _BinaryDataService_UploadBinaryData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadBinaryData",
			Handler:       _BinaryDataService_DownloadBinaryData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateBinaryData",
			Handler:       _BinaryDataService_UpdateBinaryData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
