// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/proto/api_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/ryabkov82/gophkeeper/internal/pkg/proto"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockAuthServiceClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceClient)(nil).Register), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockAuthServiceServer) Register(arg0 context.Context, arg1 *proto.RegisterRequest) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceServer)(nil).Register), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockCredentialServiceClient is a mock of CredentialServiceClient interface.
type MockCredentialServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialServiceClientMockRecorder
}

// MockCredentialServiceClientMockRecorder is the mock recorder for MockCredentialServiceClient.
type MockCredentialServiceClientMockRecorder struct {
	mock *MockCredentialServiceClient
}

// NewMockCredentialServiceClient creates a new mock instance.
func NewMockCredentialServiceClient(ctrl *gomock.Controller) *MockCredentialServiceClient {
	mock := &MockCredentialServiceClient{ctrl: ctrl}
	mock.recorder = &MockCredentialServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialServiceClient) EXPECT() *MockCredentialServiceClientMockRecorder {
	return m.recorder
}

// CreateCredential mocks base method.
func (m *MockCredentialServiceClient) CreateCredential(ctx context.Context, in *proto.CreateCredentialRequest, opts ...grpc.CallOption) (*proto.CreateCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCredential", varargs...)
	ret0, _ := ret[0].(*proto.CreateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockCredentialServiceClientMockRecorder) CreateCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockCredentialServiceClient)(nil).CreateCredential), varargs...)
}

// DeleteCredential mocks base method.
func (m *MockCredentialServiceClient) DeleteCredential(ctx context.Context, in *proto.DeleteCredentialRequest, opts ...grpc.CallOption) (*proto.DeleteCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCredential", varargs...)
	ret0, _ := ret[0].(*proto.DeleteCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *MockCredentialServiceClientMockRecorder) DeleteCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockCredentialServiceClient)(nil).DeleteCredential), varargs...)
}

// GetCredentialByID mocks base method.
func (m *MockCredentialServiceClient) GetCredentialByID(ctx context.Context, in *proto.GetCredentialByIDRequest, opts ...grpc.CallOption) (*proto.GetCredentialByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentialByID", varargs...)
	ret0, _ := ret[0].(*proto.GetCredentialByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialByID indicates an expected call of GetCredentialByID.
func (mr *MockCredentialServiceClientMockRecorder) GetCredentialByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialByID", reflect.TypeOf((*MockCredentialServiceClient)(nil).GetCredentialByID), varargs...)
}

// GetCredentials mocks base method.
func (m *MockCredentialServiceClient) GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentials", varargs...)
	ret0, _ := ret[0].(*proto.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialServiceClientMockRecorder) GetCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialServiceClient)(nil).GetCredentials), varargs...)
}

// UpdateCredential mocks base method.
func (m *MockCredentialServiceClient) UpdateCredential(ctx context.Context, in *proto.UpdateCredentialRequest, opts ...grpc.CallOption) (*proto.UpdateCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCredential", varargs...)
	ret0, _ := ret[0].(*proto.UpdateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockCredentialServiceClientMockRecorder) UpdateCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockCredentialServiceClient)(nil).UpdateCredential), varargs...)
}

// MockCredentialServiceServer is a mock of CredentialServiceServer interface.
type MockCredentialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialServiceServerMockRecorder
}

// MockCredentialServiceServerMockRecorder is the mock recorder for MockCredentialServiceServer.
type MockCredentialServiceServerMockRecorder struct {
	mock *MockCredentialServiceServer
}

// NewMockCredentialServiceServer creates a new mock instance.
func NewMockCredentialServiceServer(ctrl *gomock.Controller) *MockCredentialServiceServer {
	mock := &MockCredentialServiceServer{ctrl: ctrl}
	mock.recorder = &MockCredentialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialServiceServer) EXPECT() *MockCredentialServiceServerMockRecorder {
	return m.recorder
}

// CreateCredential mocks base method.
func (m *MockCredentialServiceServer) CreateCredential(arg0 context.Context, arg1 *proto.CreateCredentialRequest) (*proto.CreateCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockCredentialServiceServerMockRecorder) CreateCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockCredentialServiceServer)(nil).CreateCredential), arg0, arg1)
}

// DeleteCredential mocks base method.
func (m *MockCredentialServiceServer) DeleteCredential(arg0 context.Context, arg1 *proto.DeleteCredentialRequest) (*proto.DeleteCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *MockCredentialServiceServerMockRecorder) DeleteCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockCredentialServiceServer)(nil).DeleteCredential), arg0, arg1)
}

// GetCredentialByID mocks base method.
func (m *MockCredentialServiceServer) GetCredentialByID(arg0 context.Context, arg1 *proto.GetCredentialByIDRequest) (*proto.GetCredentialByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetCredentialByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialByID indicates an expected call of GetCredentialByID.
func (mr *MockCredentialServiceServerMockRecorder) GetCredentialByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialByID", reflect.TypeOf((*MockCredentialServiceServer)(nil).GetCredentialByID), arg0, arg1)
}

// GetCredentials mocks base method.
func (m *MockCredentialServiceServer) GetCredentials(arg0 context.Context, arg1 *emptypb.Empty) (*proto.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialServiceServerMockRecorder) GetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialServiceServer)(nil).GetCredentials), arg0, arg1)
}

// UpdateCredential mocks base method.
func (m *MockCredentialServiceServer) UpdateCredential(arg0 context.Context, arg1 *proto.UpdateCredentialRequest) (*proto.UpdateCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockCredentialServiceServerMockRecorder) UpdateCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockCredentialServiceServer)(nil).UpdateCredential), arg0, arg1)
}

// mustEmbedUnimplementedCredentialServiceServer mocks base method.
func (m *MockCredentialServiceServer) mustEmbedUnimplementedCredentialServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCredentialServiceServer")
}

// mustEmbedUnimplementedCredentialServiceServer indicates an expected call of mustEmbedUnimplementedCredentialServiceServer.
func (mr *MockCredentialServiceServerMockRecorder) mustEmbedUnimplementedCredentialServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCredentialServiceServer", reflect.TypeOf((*MockCredentialServiceServer)(nil).mustEmbedUnimplementedCredentialServiceServer))
}

// MockUnsafeCredentialServiceServer is a mock of UnsafeCredentialServiceServer interface.
type MockUnsafeCredentialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCredentialServiceServerMockRecorder
}

// MockUnsafeCredentialServiceServerMockRecorder is the mock recorder for MockUnsafeCredentialServiceServer.
type MockUnsafeCredentialServiceServerMockRecorder struct {
	mock *MockUnsafeCredentialServiceServer
}

// NewMockUnsafeCredentialServiceServer creates a new mock instance.
func NewMockUnsafeCredentialServiceServer(ctrl *gomock.Controller) *MockUnsafeCredentialServiceServer {
	mock := &MockUnsafeCredentialServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCredentialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCredentialServiceServer) EXPECT() *MockUnsafeCredentialServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCredentialServiceServer mocks base method.
func (m *MockUnsafeCredentialServiceServer) mustEmbedUnimplementedCredentialServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCredentialServiceServer")
}

// mustEmbedUnimplementedCredentialServiceServer indicates an expected call of mustEmbedUnimplementedCredentialServiceServer.
func (mr *MockUnsafeCredentialServiceServerMockRecorder) mustEmbedUnimplementedCredentialServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCredentialServiceServer", reflect.TypeOf((*MockUnsafeCredentialServiceServer)(nil).mustEmbedUnimplementedCredentialServiceServer))
}
