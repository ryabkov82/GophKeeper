// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/proto/api_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/proto/api_grpc.pb.go -destination=internal/pkg/proto/mocks/mock_api.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/ryabkov82/gophkeeper/internal/pkg/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
	isgomock struct{}
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceClientMockRecorder) Login(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockAuthServiceClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceClientMockRecorder) Register(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceClient)(nil).Register), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
	isgomock struct{}
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceServerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockAuthServiceServer) Register(arg0 context.Context, arg1 *proto.RegisterRequest) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceServerMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceServer)(nil).Register), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockCredentialServiceClient is a mock of CredentialServiceClient interface.
type MockCredentialServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialServiceClientMockRecorder
	isgomock struct{}
}

// MockCredentialServiceClientMockRecorder is the mock recorder for MockCredentialServiceClient.
type MockCredentialServiceClientMockRecorder struct {
	mock *MockCredentialServiceClient
}

// NewMockCredentialServiceClient creates a new mock instance.
func NewMockCredentialServiceClient(ctrl *gomock.Controller) *MockCredentialServiceClient {
	mock := &MockCredentialServiceClient{ctrl: ctrl}
	mock.recorder = &MockCredentialServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialServiceClient) EXPECT() *MockCredentialServiceClientMockRecorder {
	return m.recorder
}

// CreateCredential mocks base method.
func (m *MockCredentialServiceClient) CreateCredential(ctx context.Context, in *proto.CreateCredentialRequest, opts ...grpc.CallOption) (*proto.CreateCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCredential", varargs...)
	ret0, _ := ret[0].(*proto.CreateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockCredentialServiceClientMockRecorder) CreateCredential(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockCredentialServiceClient)(nil).CreateCredential), varargs...)
}

// DeleteCredential mocks base method.
func (m *MockCredentialServiceClient) DeleteCredential(ctx context.Context, in *proto.DeleteCredentialRequest, opts ...grpc.CallOption) (*proto.DeleteCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCredential", varargs...)
	ret0, _ := ret[0].(*proto.DeleteCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *MockCredentialServiceClientMockRecorder) DeleteCredential(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockCredentialServiceClient)(nil).DeleteCredential), varargs...)
}

// GetCredentialByID mocks base method.
func (m *MockCredentialServiceClient) GetCredentialByID(ctx context.Context, in *proto.GetCredentialByIDRequest, opts ...grpc.CallOption) (*proto.GetCredentialByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentialByID", varargs...)
	ret0, _ := ret[0].(*proto.GetCredentialByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialByID indicates an expected call of GetCredentialByID.
func (mr *MockCredentialServiceClientMockRecorder) GetCredentialByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialByID", reflect.TypeOf((*MockCredentialServiceClient)(nil).GetCredentialByID), varargs...)
}

// GetCredentials mocks base method.
func (m *MockCredentialServiceClient) GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentials", varargs...)
	ret0, _ := ret[0].(*proto.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialServiceClientMockRecorder) GetCredentials(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialServiceClient)(nil).GetCredentials), varargs...)
}

// UpdateCredential mocks base method.
func (m *MockCredentialServiceClient) UpdateCredential(ctx context.Context, in *proto.UpdateCredentialRequest, opts ...grpc.CallOption) (*proto.UpdateCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCredential", varargs...)
	ret0, _ := ret[0].(*proto.UpdateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockCredentialServiceClientMockRecorder) UpdateCredential(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockCredentialServiceClient)(nil).UpdateCredential), varargs...)
}

// MockCredentialServiceServer is a mock of CredentialServiceServer interface.
type MockCredentialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialServiceServerMockRecorder
	isgomock struct{}
}

// MockCredentialServiceServerMockRecorder is the mock recorder for MockCredentialServiceServer.
type MockCredentialServiceServerMockRecorder struct {
	mock *MockCredentialServiceServer
}

// NewMockCredentialServiceServer creates a new mock instance.
func NewMockCredentialServiceServer(ctrl *gomock.Controller) *MockCredentialServiceServer {
	mock := &MockCredentialServiceServer{ctrl: ctrl}
	mock.recorder = &MockCredentialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialServiceServer) EXPECT() *MockCredentialServiceServerMockRecorder {
	return m.recorder
}

// CreateCredential mocks base method.
func (m *MockCredentialServiceServer) CreateCredential(arg0 context.Context, arg1 *proto.CreateCredentialRequest) (*proto.CreateCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockCredentialServiceServerMockRecorder) CreateCredential(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockCredentialServiceServer)(nil).CreateCredential), arg0, arg1)
}

// DeleteCredential mocks base method.
func (m *MockCredentialServiceServer) DeleteCredential(arg0 context.Context, arg1 *proto.DeleteCredentialRequest) (*proto.DeleteCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *MockCredentialServiceServerMockRecorder) DeleteCredential(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockCredentialServiceServer)(nil).DeleteCredential), arg0, arg1)
}

// GetCredentialByID mocks base method.
func (m *MockCredentialServiceServer) GetCredentialByID(arg0 context.Context, arg1 *proto.GetCredentialByIDRequest) (*proto.GetCredentialByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetCredentialByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialByID indicates an expected call of GetCredentialByID.
func (mr *MockCredentialServiceServerMockRecorder) GetCredentialByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialByID", reflect.TypeOf((*MockCredentialServiceServer)(nil).GetCredentialByID), arg0, arg1)
}

// GetCredentials mocks base method.
func (m *MockCredentialServiceServer) GetCredentials(arg0 context.Context, arg1 *emptypb.Empty) (*proto.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialServiceServerMockRecorder) GetCredentials(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialServiceServer)(nil).GetCredentials), arg0, arg1)
}

// UpdateCredential mocks base method.
func (m *MockCredentialServiceServer) UpdateCredential(arg0 context.Context, arg1 *proto.UpdateCredentialRequest) (*proto.UpdateCredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockCredentialServiceServerMockRecorder) UpdateCredential(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockCredentialServiceServer)(nil).UpdateCredential), arg0, arg1)
}

// mustEmbedUnimplementedCredentialServiceServer mocks base method.
func (m *MockCredentialServiceServer) mustEmbedUnimplementedCredentialServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCredentialServiceServer")
}

// mustEmbedUnimplementedCredentialServiceServer indicates an expected call of mustEmbedUnimplementedCredentialServiceServer.
func (mr *MockCredentialServiceServerMockRecorder) mustEmbedUnimplementedCredentialServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCredentialServiceServer", reflect.TypeOf((*MockCredentialServiceServer)(nil).mustEmbedUnimplementedCredentialServiceServer))
}

// MockUnsafeCredentialServiceServer is a mock of UnsafeCredentialServiceServer interface.
type MockUnsafeCredentialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCredentialServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeCredentialServiceServerMockRecorder is the mock recorder for MockUnsafeCredentialServiceServer.
type MockUnsafeCredentialServiceServerMockRecorder struct {
	mock *MockUnsafeCredentialServiceServer
}

// NewMockUnsafeCredentialServiceServer creates a new mock instance.
func NewMockUnsafeCredentialServiceServer(ctrl *gomock.Controller) *MockUnsafeCredentialServiceServer {
	mock := &MockUnsafeCredentialServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCredentialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCredentialServiceServer) EXPECT() *MockUnsafeCredentialServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCredentialServiceServer mocks base method.
func (m *MockUnsafeCredentialServiceServer) mustEmbedUnimplementedCredentialServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCredentialServiceServer")
}

// mustEmbedUnimplementedCredentialServiceServer indicates an expected call of mustEmbedUnimplementedCredentialServiceServer.
func (mr *MockUnsafeCredentialServiceServerMockRecorder) mustEmbedUnimplementedCredentialServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCredentialServiceServer", reflect.TypeOf((*MockUnsafeCredentialServiceServer)(nil).mustEmbedUnimplementedCredentialServiceServer))
}

// MockBankCardServiceClient is a mock of BankCardServiceClient interface.
type MockBankCardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBankCardServiceClientMockRecorder
	isgomock struct{}
}

// MockBankCardServiceClientMockRecorder is the mock recorder for MockBankCardServiceClient.
type MockBankCardServiceClientMockRecorder struct {
	mock *MockBankCardServiceClient
}

// NewMockBankCardServiceClient creates a new mock instance.
func NewMockBankCardServiceClient(ctrl *gomock.Controller) *MockBankCardServiceClient {
	mock := &MockBankCardServiceClient{ctrl: ctrl}
	mock.recorder = &MockBankCardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankCardServiceClient) EXPECT() *MockBankCardServiceClientMockRecorder {
	return m.recorder
}

// CreateBankCard mocks base method.
func (m *MockBankCardServiceClient) CreateBankCard(ctx context.Context, in *proto.CreateBankCardRequest, opts ...grpc.CallOption) (*proto.CreateBankCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBankCard", varargs...)
	ret0, _ := ret[0].(*proto.CreateBankCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankCard indicates an expected call of CreateBankCard.
func (mr *MockBankCardServiceClientMockRecorder) CreateBankCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankCard", reflect.TypeOf((*MockBankCardServiceClient)(nil).CreateBankCard), varargs...)
}

// DeleteBankCard mocks base method.
func (m *MockBankCardServiceClient) DeleteBankCard(ctx context.Context, in *proto.DeleteBankCardRequest, opts ...grpc.CallOption) (*proto.DeleteBankCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBankCard", varargs...)
	ret0, _ := ret[0].(*proto.DeleteBankCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBankCard indicates an expected call of DeleteBankCard.
func (mr *MockBankCardServiceClientMockRecorder) DeleteBankCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankCard", reflect.TypeOf((*MockBankCardServiceClient)(nil).DeleteBankCard), varargs...)
}

// GetBankCardByID mocks base method.
func (m *MockBankCardServiceClient) GetBankCardByID(ctx context.Context, in *proto.GetBankCardByIDRequest, opts ...grpc.CallOption) (*proto.GetBankCardByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBankCardByID", varargs...)
	ret0, _ := ret[0].(*proto.GetBankCardByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardByID indicates an expected call of GetBankCardByID.
func (mr *MockBankCardServiceClientMockRecorder) GetBankCardByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardByID", reflect.TypeOf((*MockBankCardServiceClient)(nil).GetBankCardByID), varargs...)
}

// GetBankCards mocks base method.
func (m *MockBankCardServiceClient) GetBankCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.GetBankCardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBankCards", varargs...)
	ret0, _ := ret[0].(*proto.GetBankCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCards indicates an expected call of GetBankCards.
func (mr *MockBankCardServiceClientMockRecorder) GetBankCards(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCards", reflect.TypeOf((*MockBankCardServiceClient)(nil).GetBankCards), varargs...)
}

// UpdateBankCard mocks base method.
func (m *MockBankCardServiceClient) UpdateBankCard(ctx context.Context, in *proto.UpdateBankCardRequest, opts ...grpc.CallOption) (*proto.UpdateBankCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBankCard", varargs...)
	ret0, _ := ret[0].(*proto.UpdateBankCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBankCard indicates an expected call of UpdateBankCard.
func (mr *MockBankCardServiceClientMockRecorder) UpdateBankCard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankCard", reflect.TypeOf((*MockBankCardServiceClient)(nil).UpdateBankCard), varargs...)
}

// MockBankCardServiceServer is a mock of BankCardServiceServer interface.
type MockBankCardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBankCardServiceServerMockRecorder
	isgomock struct{}
}

// MockBankCardServiceServerMockRecorder is the mock recorder for MockBankCardServiceServer.
type MockBankCardServiceServerMockRecorder struct {
	mock *MockBankCardServiceServer
}

// NewMockBankCardServiceServer creates a new mock instance.
func NewMockBankCardServiceServer(ctrl *gomock.Controller) *MockBankCardServiceServer {
	mock := &MockBankCardServiceServer{ctrl: ctrl}
	mock.recorder = &MockBankCardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankCardServiceServer) EXPECT() *MockBankCardServiceServerMockRecorder {
	return m.recorder
}

// CreateBankCard mocks base method.
func (m *MockBankCardServiceServer) CreateBankCard(arg0 context.Context, arg1 *proto.CreateBankCardRequest) (*proto.CreateBankCardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankCard", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateBankCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankCard indicates an expected call of CreateBankCard.
func (mr *MockBankCardServiceServerMockRecorder) CreateBankCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankCard", reflect.TypeOf((*MockBankCardServiceServer)(nil).CreateBankCard), arg0, arg1)
}

// DeleteBankCard mocks base method.
func (m *MockBankCardServiceServer) DeleteBankCard(arg0 context.Context, arg1 *proto.DeleteBankCardRequest) (*proto.DeleteBankCardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankCard", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteBankCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBankCard indicates an expected call of DeleteBankCard.
func (mr *MockBankCardServiceServerMockRecorder) DeleteBankCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankCard", reflect.TypeOf((*MockBankCardServiceServer)(nil).DeleteBankCard), arg0, arg1)
}

// GetBankCardByID mocks base method.
func (m *MockBankCardServiceServer) GetBankCardByID(arg0 context.Context, arg1 *proto.GetBankCardByIDRequest) (*proto.GetBankCardByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetBankCardByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardByID indicates an expected call of GetBankCardByID.
func (mr *MockBankCardServiceServerMockRecorder) GetBankCardByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardByID", reflect.TypeOf((*MockBankCardServiceServer)(nil).GetBankCardByID), arg0, arg1)
}

// GetBankCards mocks base method.
func (m *MockBankCardServiceServer) GetBankCards(arg0 context.Context, arg1 *emptypb.Empty) (*proto.GetBankCardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCards", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetBankCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCards indicates an expected call of GetBankCards.
func (mr *MockBankCardServiceServerMockRecorder) GetBankCards(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCards", reflect.TypeOf((*MockBankCardServiceServer)(nil).GetBankCards), arg0, arg1)
}

// UpdateBankCard mocks base method.
func (m *MockBankCardServiceServer) UpdateBankCard(arg0 context.Context, arg1 *proto.UpdateBankCardRequest) (*proto.UpdateBankCardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankCard", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateBankCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBankCard indicates an expected call of UpdateBankCard.
func (mr *MockBankCardServiceServerMockRecorder) UpdateBankCard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankCard", reflect.TypeOf((*MockBankCardServiceServer)(nil).UpdateBankCard), arg0, arg1)
}

// mustEmbedUnimplementedBankCardServiceServer mocks base method.
func (m *MockBankCardServiceServer) mustEmbedUnimplementedBankCardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankCardServiceServer")
}

// mustEmbedUnimplementedBankCardServiceServer indicates an expected call of mustEmbedUnimplementedBankCardServiceServer.
func (mr *MockBankCardServiceServerMockRecorder) mustEmbedUnimplementedBankCardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankCardServiceServer", reflect.TypeOf((*MockBankCardServiceServer)(nil).mustEmbedUnimplementedBankCardServiceServer))
}

// MockUnsafeBankCardServiceServer is a mock of UnsafeBankCardServiceServer interface.
type MockUnsafeBankCardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBankCardServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeBankCardServiceServerMockRecorder is the mock recorder for MockUnsafeBankCardServiceServer.
type MockUnsafeBankCardServiceServerMockRecorder struct {
	mock *MockUnsafeBankCardServiceServer
}

// NewMockUnsafeBankCardServiceServer creates a new mock instance.
func NewMockUnsafeBankCardServiceServer(ctrl *gomock.Controller) *MockUnsafeBankCardServiceServer {
	mock := &MockUnsafeBankCardServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBankCardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBankCardServiceServer) EXPECT() *MockUnsafeBankCardServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBankCardServiceServer mocks base method.
func (m *MockUnsafeBankCardServiceServer) mustEmbedUnimplementedBankCardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankCardServiceServer")
}

// mustEmbedUnimplementedBankCardServiceServer indicates an expected call of mustEmbedUnimplementedBankCardServiceServer.
func (mr *MockUnsafeBankCardServiceServerMockRecorder) mustEmbedUnimplementedBankCardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankCardServiceServer", reflect.TypeOf((*MockUnsafeBankCardServiceServer)(nil).mustEmbedUnimplementedBankCardServiceServer))
}

// MockTextDataServiceClient is a mock of TextDataServiceClient interface.
type MockTextDataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTextDataServiceClientMockRecorder
	isgomock struct{}
}

// MockTextDataServiceClientMockRecorder is the mock recorder for MockTextDataServiceClient.
type MockTextDataServiceClientMockRecorder struct {
	mock *MockTextDataServiceClient
}

// NewMockTextDataServiceClient creates a new mock instance.
func NewMockTextDataServiceClient(ctrl *gomock.Controller) *MockTextDataServiceClient {
	mock := &MockTextDataServiceClient{ctrl: ctrl}
	mock.recorder = &MockTextDataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextDataServiceClient) EXPECT() *MockTextDataServiceClientMockRecorder {
	return m.recorder
}

// CreateTextData mocks base method.
func (m *MockTextDataServiceClient) CreateTextData(ctx context.Context, in *proto.CreateTextDataRequest, opts ...grpc.CallOption) (*proto.CreateTextDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTextData", varargs...)
	ret0, _ := ret[0].(*proto.CreateTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTextData indicates an expected call of CreateTextData.
func (mr *MockTextDataServiceClientMockRecorder) CreateTextData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextData", reflect.TypeOf((*MockTextDataServiceClient)(nil).CreateTextData), varargs...)
}

// DeleteTextData mocks base method.
func (m *MockTextDataServiceClient) DeleteTextData(ctx context.Context, in *proto.DeleteTextDataRequest, opts ...grpc.CallOption) (*proto.DeleteTextDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTextData", varargs...)
	ret0, _ := ret[0].(*proto.DeleteTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTextData indicates an expected call of DeleteTextData.
func (mr *MockTextDataServiceClientMockRecorder) DeleteTextData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextData", reflect.TypeOf((*MockTextDataServiceClient)(nil).DeleteTextData), varargs...)
}

// GetTextDataByID mocks base method.
func (m *MockTextDataServiceClient) GetTextDataByID(ctx context.Context, in *proto.GetTextDataByIDRequest, opts ...grpc.CallOption) (*proto.GetTextDataByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextDataByID", varargs...)
	ret0, _ := ret[0].(*proto.GetTextDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataByID indicates an expected call of GetTextDataByID.
func (mr *MockTextDataServiceClientMockRecorder) GetTextDataByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataByID", reflect.TypeOf((*MockTextDataServiceClient)(nil).GetTextDataByID), varargs...)
}

// GetTextDataTitles mocks base method.
func (m *MockTextDataServiceClient) GetTextDataTitles(ctx context.Context, in *proto.GetTextDataTitlesRequest, opts ...grpc.CallOption) (*proto.GetTextDataTitlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextDataTitles", varargs...)
	ret0, _ := ret[0].(*proto.GetTextDataTitlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataTitles indicates an expected call of GetTextDataTitles.
func (mr *MockTextDataServiceClientMockRecorder) GetTextDataTitles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataTitles", reflect.TypeOf((*MockTextDataServiceClient)(nil).GetTextDataTitles), varargs...)
}

// UpdateTextData mocks base method.
func (m *MockTextDataServiceClient) UpdateTextData(ctx context.Context, in *proto.UpdateTextDataRequest, opts ...grpc.CallOption) (*proto.UpdateTextDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTextData", varargs...)
	ret0, _ := ret[0].(*proto.UpdateTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTextData indicates an expected call of UpdateTextData.
func (mr *MockTextDataServiceClientMockRecorder) UpdateTextData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextData", reflect.TypeOf((*MockTextDataServiceClient)(nil).UpdateTextData), varargs...)
}

// MockTextDataServiceServer is a mock of TextDataServiceServer interface.
type MockTextDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTextDataServiceServerMockRecorder
	isgomock struct{}
}

// MockTextDataServiceServerMockRecorder is the mock recorder for MockTextDataServiceServer.
type MockTextDataServiceServerMockRecorder struct {
	mock *MockTextDataServiceServer
}

// NewMockTextDataServiceServer creates a new mock instance.
func NewMockTextDataServiceServer(ctrl *gomock.Controller) *MockTextDataServiceServer {
	mock := &MockTextDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockTextDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextDataServiceServer) EXPECT() *MockTextDataServiceServerMockRecorder {
	return m.recorder
}

// CreateTextData mocks base method.
func (m *MockTextDataServiceServer) CreateTextData(arg0 context.Context, arg1 *proto.CreateTextDataRequest) (*proto.CreateTextDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTextData", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTextData indicates an expected call of CreateTextData.
func (mr *MockTextDataServiceServerMockRecorder) CreateTextData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextData", reflect.TypeOf((*MockTextDataServiceServer)(nil).CreateTextData), arg0, arg1)
}

// DeleteTextData mocks base method.
func (m *MockTextDataServiceServer) DeleteTextData(arg0 context.Context, arg1 *proto.DeleteTextDataRequest) (*proto.DeleteTextDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTextData", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTextData indicates an expected call of DeleteTextData.
func (mr *MockTextDataServiceServerMockRecorder) DeleteTextData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextData", reflect.TypeOf((*MockTextDataServiceServer)(nil).DeleteTextData), arg0, arg1)
}

// GetTextDataByID mocks base method.
func (m *MockTextDataServiceServer) GetTextDataByID(arg0 context.Context, arg1 *proto.GetTextDataByIDRequest) (*proto.GetTextDataByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDataByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetTextDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataByID indicates an expected call of GetTextDataByID.
func (mr *MockTextDataServiceServerMockRecorder) GetTextDataByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataByID", reflect.TypeOf((*MockTextDataServiceServer)(nil).GetTextDataByID), arg0, arg1)
}

// GetTextDataTitles mocks base method.
func (m *MockTextDataServiceServer) GetTextDataTitles(arg0 context.Context, arg1 *proto.GetTextDataTitlesRequest) (*proto.GetTextDataTitlesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDataTitles", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetTextDataTitlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataTitles indicates an expected call of GetTextDataTitles.
func (mr *MockTextDataServiceServerMockRecorder) GetTextDataTitles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataTitles", reflect.TypeOf((*MockTextDataServiceServer)(nil).GetTextDataTitles), arg0, arg1)
}

// UpdateTextData mocks base method.
func (m *MockTextDataServiceServer) UpdateTextData(arg0 context.Context, arg1 *proto.UpdateTextDataRequest) (*proto.UpdateTextDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextData", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTextData indicates an expected call of UpdateTextData.
func (mr *MockTextDataServiceServerMockRecorder) UpdateTextData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextData", reflect.TypeOf((*MockTextDataServiceServer)(nil).UpdateTextData), arg0, arg1)
}

// mustEmbedUnimplementedTextDataServiceServer mocks base method.
func (m *MockTextDataServiceServer) mustEmbedUnimplementedTextDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTextDataServiceServer")
}

// mustEmbedUnimplementedTextDataServiceServer indicates an expected call of mustEmbedUnimplementedTextDataServiceServer.
func (mr *MockTextDataServiceServerMockRecorder) mustEmbedUnimplementedTextDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTextDataServiceServer", reflect.TypeOf((*MockTextDataServiceServer)(nil).mustEmbedUnimplementedTextDataServiceServer))
}

// MockUnsafeTextDataServiceServer is a mock of UnsafeTextDataServiceServer interface.
type MockUnsafeTextDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTextDataServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTextDataServiceServerMockRecorder is the mock recorder for MockUnsafeTextDataServiceServer.
type MockUnsafeTextDataServiceServerMockRecorder struct {
	mock *MockUnsafeTextDataServiceServer
}

// NewMockUnsafeTextDataServiceServer creates a new mock instance.
func NewMockUnsafeTextDataServiceServer(ctrl *gomock.Controller) *MockUnsafeTextDataServiceServer {
	mock := &MockUnsafeTextDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTextDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTextDataServiceServer) EXPECT() *MockUnsafeTextDataServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTextDataServiceServer mocks base method.
func (m *MockUnsafeTextDataServiceServer) mustEmbedUnimplementedTextDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTextDataServiceServer")
}

// mustEmbedUnimplementedTextDataServiceServer indicates an expected call of mustEmbedUnimplementedTextDataServiceServer.
func (mr *MockUnsafeTextDataServiceServerMockRecorder) mustEmbedUnimplementedTextDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTextDataServiceServer", reflect.TypeOf((*MockUnsafeTextDataServiceServer)(nil).mustEmbedUnimplementedTextDataServiceServer))
}

// MockBinaryDataServiceClient is a mock of BinaryDataServiceClient interface.
type MockBinaryDataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryDataServiceClientMockRecorder
	isgomock struct{}
}

// MockBinaryDataServiceClientMockRecorder is the mock recorder for MockBinaryDataServiceClient.
type MockBinaryDataServiceClientMockRecorder struct {
	mock *MockBinaryDataServiceClient
}

// NewMockBinaryDataServiceClient creates a new mock instance.
func NewMockBinaryDataServiceClient(ctrl *gomock.Controller) *MockBinaryDataServiceClient {
	mock := &MockBinaryDataServiceClient{ctrl: ctrl}
	mock.recorder = &MockBinaryDataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryDataServiceClient) EXPECT() *MockBinaryDataServiceClientMockRecorder {
	return m.recorder
}

// DeleteBinaryData mocks base method.
func (m *MockBinaryDataServiceClient) DeleteBinaryData(ctx context.Context, in *proto.DeleteBinaryDataRequest, opts ...grpc.CallOption) (*proto.DeleteBinaryDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBinaryData", varargs...)
	ret0, _ := ret[0].(*proto.DeleteBinaryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinaryData indicates an expected call of DeleteBinaryData.
func (mr *MockBinaryDataServiceClientMockRecorder) DeleteBinaryData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryData", reflect.TypeOf((*MockBinaryDataServiceClient)(nil).DeleteBinaryData), varargs...)
}

// DownloadBinaryData mocks base method.
func (m *MockBinaryDataServiceClient) DownloadBinaryData(ctx context.Context, in *proto.DownloadBinaryDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.DownloadBinaryDataResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadBinaryData", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[proto.DownloadBinaryDataResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadBinaryData indicates an expected call of DownloadBinaryData.
func (mr *MockBinaryDataServiceClientMockRecorder) DownloadBinaryData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBinaryData", reflect.TypeOf((*MockBinaryDataServiceClient)(nil).DownloadBinaryData), varargs...)
}

// ListBinaryData mocks base method.
func (m *MockBinaryDataServiceClient) ListBinaryData(ctx context.Context, in *proto.ListBinaryDataRequest, opts ...grpc.CallOption) (*proto.ListBinaryDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBinaryData", varargs...)
	ret0, _ := ret[0].(*proto.ListBinaryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBinaryData indicates an expected call of ListBinaryData.
func (mr *MockBinaryDataServiceClientMockRecorder) ListBinaryData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBinaryData", reflect.TypeOf((*MockBinaryDataServiceClient)(nil).ListBinaryData), varargs...)
}

// UpdateBinaryData mocks base method.
func (m *MockBinaryDataServiceClient) UpdateBinaryData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[proto.UpdateBinaryDataRequest, proto.UpdateBinaryDataResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBinaryData", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[proto.UpdateBinaryDataRequest, proto.UpdateBinaryDataResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBinaryData indicates an expected call of UpdateBinaryData.
func (mr *MockBinaryDataServiceClientMockRecorder) UpdateBinaryData(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryData", reflect.TypeOf((*MockBinaryDataServiceClient)(nil).UpdateBinaryData), varargs...)
}

// UploadBinaryData mocks base method.
func (m *MockBinaryDataServiceClient) UploadBinaryData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[proto.UploadBinaryDataRequest, proto.UploadBinaryDataResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadBinaryData", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[proto.UploadBinaryDataRequest, proto.UploadBinaryDataResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBinaryData indicates an expected call of UploadBinaryData.
func (mr *MockBinaryDataServiceClientMockRecorder) UploadBinaryData(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBinaryData", reflect.TypeOf((*MockBinaryDataServiceClient)(nil).UploadBinaryData), varargs...)
}

// MockBinaryDataServiceServer is a mock of BinaryDataServiceServer interface.
type MockBinaryDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryDataServiceServerMockRecorder
	isgomock struct{}
}

// MockBinaryDataServiceServerMockRecorder is the mock recorder for MockBinaryDataServiceServer.
type MockBinaryDataServiceServerMockRecorder struct {
	mock *MockBinaryDataServiceServer
}

// NewMockBinaryDataServiceServer creates a new mock instance.
func NewMockBinaryDataServiceServer(ctrl *gomock.Controller) *MockBinaryDataServiceServer {
	mock := &MockBinaryDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockBinaryDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryDataServiceServer) EXPECT() *MockBinaryDataServiceServerMockRecorder {
	return m.recorder
}

// DeleteBinaryData mocks base method.
func (m *MockBinaryDataServiceServer) DeleteBinaryData(arg0 context.Context, arg1 *proto.DeleteBinaryDataRequest) (*proto.DeleteBinaryDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinaryData", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteBinaryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinaryData indicates an expected call of DeleteBinaryData.
func (mr *MockBinaryDataServiceServerMockRecorder) DeleteBinaryData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryData", reflect.TypeOf((*MockBinaryDataServiceServer)(nil).DeleteBinaryData), arg0, arg1)
}

// DownloadBinaryData mocks base method.
func (m *MockBinaryDataServiceServer) DownloadBinaryData(arg0 *proto.DownloadBinaryDataRequest, arg1 grpc.ServerStreamingServer[proto.DownloadBinaryDataResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBinaryData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadBinaryData indicates an expected call of DownloadBinaryData.
func (mr *MockBinaryDataServiceServerMockRecorder) DownloadBinaryData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBinaryData", reflect.TypeOf((*MockBinaryDataServiceServer)(nil).DownloadBinaryData), arg0, arg1)
}

// ListBinaryData mocks base method.
func (m *MockBinaryDataServiceServer) ListBinaryData(arg0 context.Context, arg1 *proto.ListBinaryDataRequest) (*proto.ListBinaryDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBinaryData", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListBinaryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBinaryData indicates an expected call of ListBinaryData.
func (mr *MockBinaryDataServiceServerMockRecorder) ListBinaryData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBinaryData", reflect.TypeOf((*MockBinaryDataServiceServer)(nil).ListBinaryData), arg0, arg1)
}

// UpdateBinaryData mocks base method.
func (m *MockBinaryDataServiceServer) UpdateBinaryData(arg0 grpc.ClientStreamingServer[proto.UpdateBinaryDataRequest, proto.UpdateBinaryDataResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinaryData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBinaryData indicates an expected call of UpdateBinaryData.
func (mr *MockBinaryDataServiceServerMockRecorder) UpdateBinaryData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryData", reflect.TypeOf((*MockBinaryDataServiceServer)(nil).UpdateBinaryData), arg0)
}

// UploadBinaryData mocks base method.
func (m *MockBinaryDataServiceServer) UploadBinaryData(arg0 grpc.ClientStreamingServer[proto.UploadBinaryDataRequest, proto.UploadBinaryDataResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBinaryData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBinaryData indicates an expected call of UploadBinaryData.
func (mr *MockBinaryDataServiceServerMockRecorder) UploadBinaryData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBinaryData", reflect.TypeOf((*MockBinaryDataServiceServer)(nil).UploadBinaryData), arg0)
}

// mustEmbedUnimplementedBinaryDataServiceServer mocks base method.
func (m *MockBinaryDataServiceServer) mustEmbedUnimplementedBinaryDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBinaryDataServiceServer")
}

// mustEmbedUnimplementedBinaryDataServiceServer indicates an expected call of mustEmbedUnimplementedBinaryDataServiceServer.
func (mr *MockBinaryDataServiceServerMockRecorder) mustEmbedUnimplementedBinaryDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBinaryDataServiceServer", reflect.TypeOf((*MockBinaryDataServiceServer)(nil).mustEmbedUnimplementedBinaryDataServiceServer))
}

// MockUnsafeBinaryDataServiceServer is a mock of UnsafeBinaryDataServiceServer interface.
type MockUnsafeBinaryDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBinaryDataServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeBinaryDataServiceServerMockRecorder is the mock recorder for MockUnsafeBinaryDataServiceServer.
type MockUnsafeBinaryDataServiceServerMockRecorder struct {
	mock *MockUnsafeBinaryDataServiceServer
}

// NewMockUnsafeBinaryDataServiceServer creates a new mock instance.
func NewMockUnsafeBinaryDataServiceServer(ctrl *gomock.Controller) *MockUnsafeBinaryDataServiceServer {
	mock := &MockUnsafeBinaryDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBinaryDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBinaryDataServiceServer) EXPECT() *MockUnsafeBinaryDataServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBinaryDataServiceServer mocks base method.
func (m *MockUnsafeBinaryDataServiceServer) mustEmbedUnimplementedBinaryDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBinaryDataServiceServer")
}

// mustEmbedUnimplementedBinaryDataServiceServer indicates an expected call of mustEmbedUnimplementedBinaryDataServiceServer.
func (mr *MockUnsafeBinaryDataServiceServerMockRecorder) mustEmbedUnimplementedBinaryDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBinaryDataServiceServer", reflect.TypeOf((*MockUnsafeBinaryDataServiceServer)(nil).mustEmbedUnimplementedBinaryDataServiceServer))
}
