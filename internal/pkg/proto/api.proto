edition = "2023";

package gophkeeper.proto;

import "google/protobuf/timestamp.proto";
import "google/protobuf/go_features.proto";
import "google/protobuf/empty.proto";
option features.(pb.go).api_level = API_OPAQUE;

option go_package = "github.com/ryabkov82/gophkeeper/internal/pkg/proto";

// Запрос на регистрацию
message RegisterRequest {
  string login = 1;
  string password = 2;
}

// Ответ на регистрацию
message RegisterResponse {
  string message = 1;
}

// Запрос на вход
message LoginRequest {
  string login = 1;
  string password = 2;
}

// Ответ на вход
message LoginResponse {
  string access_token = 1;
  bytes salt = 2; // соль для генерации ключа шифрования
}

// gRPC-сервис аутентификации
service AuthService {
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
}

// Сообщения для Credential
message Credential {
    string id = 1;
    string user_id = 2;
    string title = 3;
    string login = 4;
    string password = 5;
    string metadata = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
}

message CreateCredentialRequest {
    Credential credential = 1;
}

message CreateCredentialResponse {
    Credential credential = 1;
}

message GetCredentialByIDRequest {
    string id = 1;
}

message GetCredentialByIDResponse {
    Credential credential = 1;
}

message GetCredentialsResponse {
    repeated Credential credentials = 1;
}

message UpdateCredentialRequest {
    Credential credential = 1;
}

message UpdateCredentialResponse {
    Credential credential = 1;
}

message DeleteCredentialRequest {
    string id = 1;
}

message DeleteCredentialResponse {
    bool success = 1;
}

// Сообщения для BankCard
message BankCard {
    string id = 1;
    string user_id = 2;
    string title = 3;
    string cardholder_name = 4;
    string card_number = 5;
    string expiry_date = 6;
    string cvv = 7;
    string metadata = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
}

message CreateBankCardRequest {
    BankCard bank_card = 1;
}

message CreateBankCardResponse {
    BankCard bank_card = 1;
}

message GetBankCardByIDRequest {
    string id = 1;
}

message GetBankCardByIDResponse {
    BankCard bank_card = 1;
}

message GetBankCardsResponse {
    repeated BankCard bank_cards = 1;
}

message UpdateBankCardRequest {
    BankCard bank_card = 1;
}

message UpdateBankCardResponse {
    BankCard bank_card = 1;
}

message DeleteBankCardRequest {
    string id = 1;
}

message DeleteBankCardResponse {
    bool success = 1;
}

// Сообщение для TextData
message TextData {
    string id = 1;
    string user_id = 2;
    string title = 3;
    bytes content = 4;               // Зашифрованное содержимое
    string metadata = 5;             // Дополнительная информация (JSON или текст)
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

// Запрос и ответ на создание TextData
message CreateTextDataRequest {
    TextData text_data = 1;
}

message CreateTextDataResponse {
    TextData text_data = 1;
}

// Запрос и ответ на получение TextData по ID
message GetTextDataByIDRequest {
    string id = 1;
}

message GetTextDataByIDResponse {
    TextData text_data = 1;
}

// Запрос и ответ на получение списка заголовков TextData
message GetTextDataTitlesRequest {
    string user_id = 1;
}

message GetTextDataTitlesResponse {
    repeated TextData text_data_titles = 1;  // Содержит только id и title
}

// Запрос и ответ на обновление TextData
message UpdateTextDataRequest {
    TextData text_data = 1;
}

message UpdateTextDataResponse {
    bool success = 1;
}

// Запрос и ответ на удаление TextData
message DeleteTextDataRequest {
    string id = 1;
}

message DeleteTextDataResponse {
    bool success = 1;
}

// Сообщения для BinaryData
message UploadBinaryDataRequest {
    bytes chunk = 1;           // фрагмент файла
    BinaryDataInfo info = 2;   // метаданные файла
}

message UploadBinaryDataResponse {
    string id = 1;             // UUID записи
}

message DownloadBinaryDataRequest {
    string id = 1;             // UUID записи
}

message DownloadBinaryDataResponse {
    bytes chunk = 1;           // фрагмент файла
}

message ListBinaryDataRequest {}

message ListBinaryDataResponse {
    repeated BinaryDataInfo items = 1;
}

message BinaryDataInfo {
    string id = 1;
    string title = 2;
    string metadata = 3;
    int64 size = 4;
    string client_path = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message DeleteBinaryDataRequest {
    string id = 1;
}

message DeleteBinaryDataResponse {}

// Запрос информации о файле
message GetBinaryDataInfoRequest {
    string id = 1; // UUID записи
}

// Ответ с метаданными файла
message GetBinaryDataInfoResponse {
    BinaryDataInfo binary_info = 1;
}

// Запрос для обновления бинарных данных (поток)
message UpdateBinaryDataRequest {
    BinaryDataInfo info = 2; // информация о файле (передается в первом пакете)
}

// Ответ после завершения обновления
message UpdateBinaryDataResponse {
    string id = 1;         // ID обновленной записи
}

message SaveBinaryDataInfoRequest {
    BinaryDataInfo info = 1;
}

message SaveBinaryDataInfoResponse {
    string id = 1;
}

// Сервис для работы с Credential
service CredentialService {
    rpc CreateCredential(CreateCredentialRequest) returns (CreateCredentialResponse);
    rpc GetCredentialByID(GetCredentialByIDRequest) returns (GetCredentialByIDResponse);
    rpc GetCredentials(google.protobuf.Empty) returns (GetCredentialsResponse);
    rpc UpdateCredential(UpdateCredentialRequest) returns (UpdateCredentialResponse);
    rpc DeleteCredential(DeleteCredentialRequest) returns (DeleteCredentialResponse);
}

// Сервис для работы с BankCard
service BankCardService {
    rpc CreateBankCard(CreateBankCardRequest) returns (CreateBankCardResponse);
    rpc GetBankCardByID(GetBankCardByIDRequest) returns (GetBankCardByIDResponse);
    rpc GetBankCards(google.protobuf.Empty) returns (GetBankCardsResponse);
    rpc UpdateBankCard(UpdateBankCardRequest) returns (UpdateBankCardResponse);
    rpc DeleteBankCard(DeleteBankCardRequest) returns (DeleteBankCardResponse);
}

// Сервис для работы с TextData
service TextDataService {
    rpc CreateTextData(CreateTextDataRequest) returns (CreateTextDataResponse);
    rpc GetTextDataByID(GetTextDataByIDRequest) returns (GetTextDataByIDResponse);
    rpc GetTextDataTitles(GetTextDataTitlesRequest) returns (GetTextDataTitlesResponse);
    rpc UpdateTextData(UpdateTextDataRequest) returns (UpdateTextDataResponse);
    rpc DeleteTextData(DeleteTextDataRequest) returns (DeleteTextDataResponse);
}

// Сервис для работы с BinaryData
service BinaryDataService {
    rpc SaveBinaryDataInfo(SaveBinaryDataInfoRequest) returns (SaveBinaryDataInfoResponse);
    rpc GetBinaryDataInfo(GetBinaryDataInfoRequest) returns (GetBinaryDataInfoResponse);
    rpc ListBinaryData(ListBinaryDataRequest) returns (ListBinaryDataResponse);
    rpc UpdateBinaryDataInfo(UpdateBinaryDataRequest) returns (UpdateBinaryDataResponse);    
    rpc DeleteBinaryData(DeleteBinaryDataRequest) returns (DeleteBinaryDataResponse);    
    rpc UploadBinaryData(stream UploadBinaryDataRequest) returns (UploadBinaryDataResponse);
    rpc DownloadBinaryData(DownloadBinaryDataRequest) returns (stream DownloadBinaryDataResponse);
}