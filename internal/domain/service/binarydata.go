package service

import (
	"context"
	"io"

	"github.com/ryabkov82/gophkeeper/internal/domain/model"
)

// BinaryDataService определяет бизнес-логику для работы с бинарными данными.
//
// Интерфейс инкапсулирует операции создания, получения, перечисления и удаления бинарных данных.
// Реализация сервиса может использовать различные источники хранения: локальная ФС, S3, Postgres и т.д.
// Сервис скрывает детали хранения и обеспечивает единый API для верхних слоев приложения.
type BinaryDataService interface {
	// Create сохраняет новую запись бинарных данных для указанного пользователя.
	//
	// Параметры:
	//   - ctx: контекст выполнения операции
	//   - data: структура BinaryData с заполненными полями пользователя, заголовка,
	//     метаданных и пути к исходному файлу на клиенте
	//   - r: поток данных для сохранения
	//
	// Возвращает:
	//   - модель BinaryData с метаданными и идентификатором
	//   - ошибку, если операция не удалась
	Create(ctx context.Context, data *model.BinaryData, r io.Reader) (*model.BinaryData, error)

	// CreateInfo сохраняет только информацию о бинарных данных без их содержимого.
	//
	// Параметры:
	//   - ctx: контекст выполнения операции
	//   - data: структура BinaryData с заполненными полями пользователя, заголовка,
	//     метаданных и клиентского пути
	//
	// Возвращает:
	//   - созданную модель BinaryData с присвоенным идентификатором
	//   - ошибку, если операция не удалась
	CreateInfo(ctx context.Context, data *model.BinaryData) (*model.BinaryData, error)

	// Update перезаписывает бинарные данные и метаданные существующей записи.
	//
	// Параметры:
	//   - ctx: контекст выполнения
	//   - data: структура BinaryData с идентификатором записи и обновлёнными полями
	//   - r: поток новых бинарных данных (если нужно обновить содержимое)
	//
	// Возвращает:
	//   - обновленную модель BinaryData с актуальными метаданными
	//   - ошибку, если операция не удалась
	Update(ctx context.Context, data *model.BinaryData, r io.Reader) (*model.BinaryData, error)

	// UpdateInfo обновляет только метаданные (заголовок и описание) без изменения бинарного содержимого.
	//
	// Параметры:
	//   - ctx: контекст выполнения
	//   - data: структура BinaryData с идентификатором записи и новыми метаданными
	//
	// Возвращает:
	//   - обновлённую модель BinaryData
	//   - ошибку, если операция не удалась
	UpdateInfo(ctx context.Context, data *model.BinaryData) (*model.BinaryData, error)

	// Get возвращает бинарные данные по идентификатору пользователя и записи.
	//
	// Параметры:
	//   - ctx: контекст выполнения операции
	//   - userID: идентификатор владельца данных
	//   - id: идентификатор бинарной записи
	//
	// Возвращает:
	//   - модель BinaryData с метаданными
	//   - поток для чтения содержимого (io.ReadCloser)
	//   - ошибку, если запись не найдена или произошла ошибка чтения
	Get(ctx context.Context, userID, id string) (*model.BinaryData, io.ReadCloser, error)

	// GetInfo возвращает только метаданные бинарных данных без чтения содержимого.
	//
	// Параметры:
	//   - ctx: контекст выполнения операции
	//   - userID: идентификатор владельца данных
	//   - id: идентификатор бинарной записи
	//
	// Возвращает:
	//   - модель BinaryData (без потока содержимого)
	//   - ошибку, если запись не найдена
	GetInfo(ctx context.Context, userID, id string) (*model.BinaryData, error)

	// List возвращает список всех бинарных данных конкретного пользователя.
	//
	// Параметры:
	//   - ctx: контекст выполнения операции
	//   - userID: идентификатор пользователя
	//
	// Возвращает:
	//   - срез моделей BinaryData с метаданными (без самого контента)
	//   - ошибку, если операция не удалась
	List(ctx context.Context, userID string) ([]*model.BinaryData, error)

	// Delete удаляет бинарные данные по идентификатору пользователя и записи.
	//
	// Параметры:
	//   - ctx: контекст выполнения операции
	//   - userID: идентификатор владельца данных
	//   - id: идентификатор записи для удаления
	//
	// Возвращает:
	//   - ошибку, если удаление не удалось или запись не найдена
	Delete(ctx context.Context, userID, id string) error

	// Close освобождает ресурсы
	Close()
}
