// Package storage определяет интерфейсы для абстрактного хранилища бинарных данных.
//
// В отличие от пакета repository, который отвечает за хранение метаданных в БД,
// пакет storage описывает операции с самими бинарными файлами (контент).
// Это позволяет использовать разные реализации хранилища: локальная файловая система,
// S3-совместимые сервисы, облачные стореджи и т.д.
//
// Типичный сценарий работы:
//  1. Сначала сервис вызывает BinaryDataStorage.Save(), чтобы записать файл и получить путь/ключ.
//  2. Этот путь сохраняется в таблице binary_data (через BinaryDataRepository).
//  3. Для загрузки данных используется BinaryDataStorage.Load() по сохранённому пути.
//  4. Для удаления записи из хранилища вызывается BinaryDataStorage.Delete().
package storage

import (
	"context"
	"io"
)

// BinaryDataStorage абстрагирует доступ к бинарным данным (файлам).
// Реализации могут сохранять данные в локальной файловой системе,
// удалённом объектном хранилище (например, S3/MinIO) или в другом бэкенде.
//
// Интерфейс используется сервисным слоем совместно с BinaryDataRepository:
//   - Repository хранит метаданные в БД.
//   - Storage управляет самим бинарным контентом.
type BinaryDataStorage interface {
	// Save сохраняет бинарные данные из r в хранилище.
	// Возвращает относительный путь или ключ (storagePath), который можно
	// сохранить в БД для последующего доступа к файлу.
	//
	// userID — владелец данных, может использоваться для организации структуры каталогов.
	Save(ctx context.Context, userID string, r io.Reader) (storagePath string, err error)

	// Load возвращает поток для чтения бинарных данных по указанному storagePath.
	// Вызвавший код обязан закрыть возвращённый io.ReadCloser.
	Load(ctx context.Context, storagePath string) (io.ReadCloser, error)

	// Delete удаляет бинарные данные из хранилища по указанному storagePath.
	Delete(ctx context.Context, storagePath string) error

	// Close освобождает ресурсы
	Close()
}
